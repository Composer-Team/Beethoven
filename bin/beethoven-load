#!/usr/bin/python3

import os
import json
import subprocess
import sys
import util
# Make sure that Beethoven directory exists
if os.environ.get('BEETHOVEN_PATH') is None:
    print("You must define the $BEETHOVEN_PATH environment variable. We expect it to be the top-level of the"
          " Beethoven repo.")
    exit(1)

os.system("sudo killall BeethovenRuntime")

config = util.get_config()

# Make sure that xdma is setup and working, otherwise set it up
#xdmas = list(os.walk("/dev"))[0][2]
#if len(list(filter(lambda x: "xdma" in x, xdmas))) == 0:
#    os.system(f"cd {os.environ['BEETHOVEN_PATH']} && git clone https://github.com/aws/aws-fpga.git || true"
#              f" && cd aws-fpga/sdk/linux_kernel_drivers/xdma/ && make && sudo insmod xdma.ko")

# aws ec2 describe-fpga-images --owner self
proc = os.popen("aws ec2 describe-fpga-images --owner self")
images = json.load(proc)['FpgaImages']
names = [i['Name'] for i in images]

for idx, nm in enumerate(names):
    print(f"\t[{idx}] - {nm} - Availability: {images[idx]['State']['Code']}")

choice = int(input("Select an image to load\n"))
chosen_name = names[choice]
assert len(names) > choice >= 0
os.system("sudo fpga-load-local-image -S 0 -I " + str(images[choice]['FpgaImageGlobalId']))
s3_name = f"beethoven-{config['username']}"

# Load Beethoven Runtime now
os.system(f"mkdir -p $BEETHOVEN_PATH/build/ && cd $BEETHOVEN_PATH/build &&"
          f"aws s3 cp s3://{s3_name}/env_{chosen_name}.tar.gz . &&"
          f"tar -xf env_{chosen_name}.tar.gz")
os.system(f"cd $BEETHOVEN_PATH/Beethoven-Runtime/ && mkdir -p build && "
          f" cd build && cmake .. -DTARGET=fpga -DBACKEND=F2 && make -j BeethovenRuntime")
proc = os.system("sudo $BEETHOVEN_PATH/Beethoven-Runtime/build/BeethovenRuntime")




