#!/usr/bin/python3
import aws_tools
import os
import vsim_tools
import sys
import util

opts = {}
if os.path.exists("composer.cfg") and "--force" not in sys.argv:
    with open("composer.cfg") as f:
        for ln in f.readlines():
            spl = [q.strip() for q in ln.strip().split(" ")]
            opts.update({spl[0]: spl[1]})
else:
    opt = input("'composer.cfg' file not found.\n"
                "Which backend?\n"
                "1 - AWS FPGA\n"
                "2 - XSIM (Simulation of AWS Shell using Xilinx Vivado XSIM) - SLOW!\n"
                "3 - sanity\n").strip()
    if opt == '1':
        opt = 'aws'
    elif opt == '2':
        opt = 'vsim'
    elif opt == '3':
        opt = 'sanity'
    else:
        raise Exception("Invalid response")
    opts.update({'backend': opt})
    with open("composer.cfg", 'w') as f:
        f.write(f"backend {opt}\n")
    print("Your choice have been recorded in `composer.cfg`")

aws = "~/aws-fpga"
hdk_dir = os.environ.get("HDK_DIR")
if hdk_dir is None:
    print("HDK_DIR not set. This is usually set as part of aws-fpga setup. "
          "Please source hdk_setup.sh in the aws-fpga repo before running this.")
    hdk_dir = f"{aws}/hdk"
    os.environ["HDK_DIR"] = hdk_dir
aws_tools.create_aws_shell()

path = f"{hdk_dir}/common/shell_stable/new_cl_template/"

# copy cl template
os.system(f"cp -rL {path}/build . && mkdir -p design && mv composer_aws.sv design/")
os.system(f"rm build/scripts/*")
aws_tools.move_sources_to_design()

# copy in the cl_dram_dma constraints over it
os.system(f"cp {hdk_dir}/cl/examples/cl_dram_dma/build/constraints/* build/constraints/")
util.append_to_file("build/constraints/cl_pnr_user.xdc", "generated-src/user_constraints.xdc")
os.system("mkdir -p build/checkpoints && mkdir -p build/reports")

aws_tools.write_id_defines()
aws_tools.write_encrypt_script()

srcs = list(os.walk("design/"))[0][1]

aws_tools.create_synth_script(srcs)
aws_tools.copy_dcp_scripts()

# # TODO fix - emits warning on linux
# # os.system('sed -i -E "s/\"vivado /\"vivado -stack 1500 /" build/scripts/aws_build_dcp_from_cl.sh')
# if opts['backend'] == 'vsim' or opts['backend'] == 'sanity':
#     pwd = os.getcwd()
#     vss = os.environ["COMPOSER_ROOT"] + "/bin/vsim_src"
#     hlw = os.environ["COMPOSER_ROOT"] + "/aws-fpga/hdk/cl/examples/cl_hello_world/verif/scripts"
#     os.system(f'mkdir -p software/runtime && mkdir -p verif/scripts && '
#               f'cp {vss}/vivado_test.c software/runtime && '
#               f'cp {hlw}/Makefile verif/scripts && '
#               f'cp {vss}/vivado_top verif/scripts/top.vivado.f && '
#               f'cp {vss}/Makefile.vivado verif/scripts/ &&'
#               f'cp {vss}/waves.tcl verif/scripts/ && '
#               f'mkdir -p verif/tests && '
#               f'cp -r {vss}/test_null.sv verif/tests/')
#     vsim_tools.modify_vsim_makefile_in_place("verif/scripts/Makefile")
#     print("You are responsible for building the runtime from the Composer-Runtime repo")
