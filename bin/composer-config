#!/usr/bin/python3
import os
import aws_tools
import vsim_tools
import sys

cr = os.environ.get("COMPOSER_ROOT")
if cr is None:
    print("COMPOSER_ROOT appears to not be defined in your environment. Please define.")
    exit(1)

opts = {}
if os.path.exists("composer.cfg") and not "--force" in sys.argv:
    with open("composer.cfg") as f:
        for ln in f.readlines():
            spl = [q.strip() for q in ln.strip().split(" ")]
            opts.update({spl[0]: spl[1]})
else:
    opt = input("'composer.cfg' file not found.\n"
                "Which backend?\n"
                "0 - Verilator (Simulation)\n"
                "1 - AWS FPGA\n"
                "2 - XSIM (Simulation of AWS Shell using Xilinx Vivado XSIM) - SLOW!\n").strip()
    if opt == '0':
        opt = 'verilator'
        build_type = input("[Debug]/Release?\n")
        if build_type == "":
            build_type = "Debug"
        assert build_type in ["Debug", "Release"]
        opts.update({"build_type": build_type})
    elif opt == '1':
        opt = 'aws'
    elif opt == '2':
        opt = 'vsim'
    else:
        raise Exception("Invalid response")
    opts.update({'backend': opt})
    with open("composer.cfg", 'w') as f:
        f.write(f"backend {opt}\n")
    print("Your choice have been recorded in `composer.cfg`")

if opts['backend'] == 'verilator':
    os.system(f"cmake {cr}/Composer_Verilator -DTARGET=sim -DCMAKE_BUILD_TYPE={opts['build_type']}")
elif opts['backend'] == 'aws' or opts['backend'] == 'vsim':
    aws = os.environ.get("COMPOSER_ROOT") + "/aws-fpga"
    hdk_dir = os.environ.get("HDK_DIR")
    if hdk_dir is None:
        print("HDK_DIR not set. This is usually set as part of aws-fpga setup. "
              "Please source hdk_setup.sh in the aws-fpga repo before running this.")
        hdk_dir = f"{aws}/hdk"
        os.environ["HDK_DIR"] = hdk_dir
        if not opts['build']:
            exit(1)
    aws_tools.create_aws_shell()

    path = f"{hdk_dir}/common/shell_stable/new_cl_template/"
    os.system(f"cp -rL {path}/build . && mkdir -p design && mv composer_aws.sv design/ &&"
              f" cp generated-src/composer.v design/")
    aws_tools.write_id_defines()

    aws_tools.write_encrypt_script_from_base_inline("build/scripts/encrypt.tcl")
    os.system("mkdir -p build/checkpoints && mkdir -p build/reports")

    aws_tools.create_synth_script("build/scripts/synth_composer_aws.tcl")

    tcl_name = "build/scripts/synth_composer_aws.tcl"

    aws_tools.create_dcp_script_inline("build/scripts/create_dcp_from_cl.tcl")
    if opts['backend'] == 'vsim':
        assert 0 == os.system(f"cmake {cr}/Composer_Verilator -DTARGET=vsim -DCMAKE_BUILD_TYPE=Debug . && make")
        pwd = os.getcwd()
        vss = os.environ["COMPOSER_ROOT"] + "/bin/vsim_src"
        hlw = os.environ["COMPOSER_ROOT"] + "/hdk/cl/examples/cl_hello_world/verif/scripts"
        os.system(f'mkdir -p software/runtime && mkdir -p verif/scripts && '
                  f'cp {vss}/vivado_test.c software/runtime && '
                  f'cp {hlw}/Makefile verif/scripts && '
                  f'cp {vss}/vivado_top verif/scripts/top.vivado.f && '
                  f'cp {hlw}/Makefile.vivado verif/scripts/ &&'
                  f'cp {hlw}/waves.tcl verif/scripts/ && '
                  f'mkdir -p verif/tests && '
                  f'cp -r {vss}/test_null.sv verif/tests/')
        vsim_tools.modify_vsim_makefile_in_place("verif/scripts/Makefile")

else:
    print("operation not recognized")

